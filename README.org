:PROPERTIES:
:header-args: :results verbatim :exports both
:END:
#+title: its-jointprobability
#+EXPORT_EXCLUDE_TAGS: noexport

A Bayesian approach to generating metadata for educational materials.

This project is primarily intended to be used as a microservice through the ~nix~ package. Additionally, it includes some CLI utilities in order to (re-) train the model for some data (data not included).

* Utils :noexport:
#+name: format-json
#+begin_src shell sh :var result="" :results verbatim
echo $result | json
#+end_src

#+name: format-prediction
#+begin_src python :var result="" :results verbatim output :session python-jointprobability-demo
import json
import pandas as pd
result_dict = json.loads(result)
df = pd.DataFrame.from_dict(result_dict["disciplines"]).set_index("name")
df = df.drop("id", axis=1)
df["prob_interval"] = df.apply(lambda x: [f"{y:g}" for y in x["prob_interval"]], axis=1)
print(df)
#+end_src

* Usage

** Service

With ~Nix~, no further installation is required to run the microservice. Simply run the following command:
#+begin_src shell
nix run github:openeduhub/its-jointprobability
#+end_src
or optionally, with CUDA support:
#+begin_src shell
nix run "github:openeduhub/its-jointprobability#with-cuda"
#+end_src

If the package has been installed locally, the service is also available as ~its-jointprobability~ from the command line.

For more information on configuration options, see
#+begin_src shell
nix run github:openeduhub/its-jointprobability -- --help
#+end_src

Once started, see the ~Swagger~ UI for documentation on the service.
It is located on =http://localhost:8080/docs= by default.

** Model Training

To retrain the model under some data, use the included ~retrain-model~ CLI tool, e.g. through
#+begin_src shell
nix run "github:openeduhub/its-jointprobability#retrain-model" -- <path/to/data-dir>
#+end_src
or, *highly recommended*, with CUDA:
#+begin_src shell
nix run "github:openeduhub/its-jointprobability#retrain-model-with-cuda" -- <path/to/data-dir>
#+end_src

The utility will look for =train_data= and =train_labels=, which are assumed to files that can be loaded through [[https://pytorch.org/docs/stable/generated/torch.load.html][torch.load]]. These should be (=float=-type) [[https://pytorch.org/docs/stable/tensors.html#torch.Tensor][torch.Tensor]] objects with the following content:
- ~train_data_labeled~ :: a two-dimensional =Tensor= where the first dimension corresponds to the individual documents to use for training and the second dimensions contains each document's content, encoded through their Bag-of-words representation.
- ~train_targets~ :: a two-dimensional =Tensor= where the first dimension corresponds to the individual documents to use for training and the second dimension encodes whether each document belongs to each discipline (=1.0= if it does, =0.0= otherwise).

Once the data has been loaded, the topic model will be trained (this will take a long time) and saved within the set directory under =prodslda=. If this file already exists, this step is skipped.

Finally, the Bayesian classification model is trained and saved under =classification=. At this point, some quality metrics will be computed for the model on the training data. If ~test_data_labeled~ and ~test_targets~ are present in the given directory (analogous to the training data), these quality metrics will also be computed for this testing data.

* Features & Demo of the Service
:PROPERTIES:
:header-args: :results verbatim :exports both :post format-json(result=*this*) :wrap src
:END:

** Ping

Once the service has started, we can ping it to check that it is responding to requests:
#+begin_src shell :post :exports both
curl -i -X GET http://localhost:8080/_ping
#+end_src

#+RESULTS:
#+begin_src
HTTP/1.1 200 OK
date: Mon, 15 Jan 2024 15:34:05 GMT
server: uvicorn
content-length: 4
content-type: application/json

null
#+end_src

** Discipline Prediction
:PROPERTIES:
:header-args: :results verbatim :exports both :post format-prediction(result=*this*) :wrap src
:END:

With the =/predict_disciplines= endpoint, we can send a text to be assigned school disciplines to the model. For readability, we only ask for the ten most relevant disciplines.

In addition to the identifiers of the predicted disciplines, we also get some diagnostics that help us understand whether this is a relevant match (in principle, all disciplines are always returned). Specifically, we gain two point-estimates (mean and median) for the probability of the discipline belonging to the given text, according to the model. We also get a credibility interval (by default 80%) on said probability.

In the example below, we get only one relevant school discipline, which is also the one we would be expecting for the text (Mathematics). Because the text is relatively short, the probability of this fit is still relatively low.
#+begin_src shell :exports both
curl -X 'POST' \
  'http://localhost:8080/predict_disciplines' \
  -H 'Content-Type: application/json' \
  -d '{
  "text": "Der Satz des Pythagoras lautet: a^2 + b^2 = c^2. Er wird benutzt, um die Hypotenuse eines rechtwinkligen Dreiecks zu berechnen.",
  "num_predictions": "10"
}'
#+end_src

#+RESULTS:
#+begin_src
                          mean_prob   median_prob               prob_interval
name                                                                         
Mathematik                 0.380347  4.679603e-02     [2.58426e-12, 0.997651]
Allgemein                  0.025078  9.139661e-08  [4.02003e-19, 3.60229e-05]
Geschichte                 0.013122  1.675367e-09  [1.45597e-18, 3.68128e-05]
Deutsch als Zweitsprache   0.004084  1.591279e-09  [7.27887e-19, 2.47795e-06]
Deutsch                    0.018983  1.113269e-09  [1.01956e-19, 1.76982e-06]
Informatik                 0.023973  3.909545e-10  [3.13856e-19, 9.79974e-06]
Religion                   0.002449  2.181983e-10    [4.0397e-17, 2.2892e-07]
Wirtschaftskunde           0.005079  1.934336e-10  [2.33006e-21, 1.16182e-06]
Chemie                     0.001075  1.793724e-10   [2.9836e-23, 8.86167e-08]
Physik                     0.004888  8.746266e-11  [3.99191e-20, 2.19302e-07]
#+end_src

Note that these predictions are stochastic, so another run on the same text may yield slightly different predictions:
#+begin_src shell :exports both
curl -X 'POST' \
  'http://localhost:8080/predict_disciplines' \
  -H 'Content-Type: application/json' \
  -d '{
  "text": "Der Satz des Pythagoras lautet: a^2 + b^2 = c^2. Er wird benutzt, um die Hypotenuse eines rechtwinkligen Dreiecks zu berechnen.",
  "num_predictions": "10"
}'
#+end_src

#+RESULTS:
#+begin_src
                          mean_prob   median_prob               prob_interval
name                                                                         
Mathematik                 0.413750  6.072480e-02     [3.74232e-17, 0.996319]
Allgemein                  0.046641  4.290943e-07   [5.38503e-16, 0.00123938]
Deutsch als Zweitsprache   0.005944  8.564911e-09  [2.03611e-19, 1.14642e-05]
Religion                   0.001300  2.122331e-09  [5.93142e-19, 2.55613e-06]
Wirtschaftskunde           0.016771  2.392138e-10  [1.03162e-18, 8.05093e-07]
Chemie                     0.007501  1.393300e-10  [8.24574e-20, 3.14066e-07]
Physik                     0.010210  1.159532e-10  [7.21657e-21, 3.77208e-07]
Geschichte                 0.021180  1.073886e-10  [1.36578e-19, 1.19308e-06]
Politik                    0.021253  9.180040e-11  [3.20709e-19, 8.59679e-07]
Medienbildung              0.000001  8.611604e-11   [1.10281e-20, 5.8364e-08]
#+end_src

To reduce this variance, we can increase the number of samples being drawn for the prediction. Note that the computation time is proportional to the number of such samples. By default, 100 samples are drawn.
#+begin_src shell :exports both
curl -X 'POST' \
  'http://localhost:8080/predict_disciplines' \
  -H 'Content-Type: application/json' \
  -d '{
  "text": "Der Satz des Pythagoras lautet: a^2 + b^2 = c^2. Er wird benutzt, um die Hypotenuse eines rechtwinkligen Dreiecks zu berechnen.",
  "num_predictions": "10",
  "num_samples": "2500"
}'
#+end_src

#+RESULTS:
#+begin_src
                          mean_prob   median_prob               prob_interval
name                                                                         
Mathematik                 0.423784  1.268049e-01     [1.64411e-18, 0.998153]
Allgemein                  0.046481  8.643046e-08  [1.45753e-21, 0.000206123]
Deutsch als Zweitsprache   0.016869  8.981272e-10  [1.07321e-26, 2.46336e-06]
Geschichte                 0.016634  8.499260e-10  [4.44265e-24, 3.15789e-06]
Religion                   0.016112  8.199766e-10  [2.58646e-23, 2.35166e-06]
Informatik                 0.021049  7.731125e-10  [1.20419e-25, 3.17143e-06]
Deutsch                    0.012258  2.038014e-10  [3.43058e-28, 1.21392e-06]
Wirtschaftskunde           0.009198  1.468612e-10  [4.69967e-25, 2.88937e-07]
Englisch                   0.007595  7.487544e-11   [1.30783e-24, 2.4586e-07]
Politik                    0.011307  7.206761e-11  [3.39157e-26, 2.75936e-07]
#+end_src

Second run, for comparison
#+begin_src shell :exports both
curl -X 'POST' \
  'http://localhost:8080/predict_disciplines' \
  -H 'Content-Type: application/json' \
  -d '{
  "text": "Der Satz des Pythagoras lautet: a^2 + b^2 = c^2. Er wird benutzt, um die Hypotenuse eines rechtwinkligen Dreiecks zu berechnen.",
  "num_predictions": "10",
  "num_samples": "2500"
}'
#+end_src

#+RESULTS:
#+begin_src
                          mean_prob   median_prob               prob_interval
name                                                                         
Mathematik                 0.431154  1.383242e-01     [2.08442e-19, 0.998146]
Allgemein                  0.047248  1.254724e-07  [1.23876e-23, 0.000368148]
Informatik                 0.020422  1.099408e-09  [3.41015e-24, 4.73848e-06]
Deutsch als Zweitsprache   0.015726  8.126293e-10  [7.98029e-27, 3.35471e-06]
Religion                   0.014722  6.224634e-10  [1.66284e-24, 1.43106e-06]
Geschichte                 0.018726  5.579727e-10  [1.08679e-27, 2.68374e-06]
Deutsch                    0.013343  2.655548e-10  [3.88874e-25, 1.07848e-06]
Wirtschaftskunde           0.007837  1.119125e-10    [3.0083e-26, 4.4707e-07]
Chemie                     0.005382  1.065714e-10   [4.0824e-28, 2.75373e-07]
Politik                    0.008488  9.583057e-11   [7.2782e-27, 3.84196e-07]
#+end_src

Note that the individual probabilities of all of the disciplines do not necessarily add up to 1. This is intended, as assigning a text multiple relevant disciplines is often desired. As an example, take the following paragraph taken from [[https://de.wikipedia.org/wiki/Deutschland][the German Wikipedia page on Germany]]. This is mostly about the history of Germany, but because it also covers relatively recent developments, it may also be relevant to politics.
#+begin_src shell :exports both
curl -X 'POST' \
  'http://localhost:8080/predict_disciplines' \
  -H 'Content-Type: application/json' \
  -d '{
  "text": "Die rasche Entwicklung vom Agrar- zum Industriestaat vollzog sich während der Gründerzeit in der zweiten Hälfte des 19. Jahrhunderts. Nach dem Ersten Weltkrieg wurde 1918 die Monarchie abgeschafft und die demokratische Weimarer Republik konstituiert. Ab 1933 führte die nationalsozialistische Diktatur zu politischer und rassistischer Verfolgung und gipfelte in der Ermordung von sechs Millionen Juden und Angehörigen anderer Minderheiten wie Sinti und Roma. Der vom NS-Staat 1939 begonnene Zweite Weltkrieg endete 1945 mit der Niederlage der Achsenmächte. Das von den Siegermächten besetzte Land wurde 1949 geteilt, nachdem bereits 1945 seine Ostgebiete teils unter polnische, teils sowjetische Verwaltungshoheit gestellt worden waren. Der Gründung der Bundesrepublik als demokratischer westdeutscher Teilstaat mit Westbindung am 23. Mai 1949 folgte die Gründung der sozialistischen DDR am 7. Oktober 1949 als ostdeutscher Teilstaat unter sowjetischer Hegemonie. Die innerdeutsche Grenze war nach dem Berliner Mauerbau (ab 13. August 1961) abgeriegelt. Nach der friedlichen Revolution in der DDR 1989 erfolgte die Lösung der deutschen Frage durch die Wiedervereinigung beider Landesteile am 3. Oktober 1990, womit auch die Außengrenzen Deutschlands als endgültig anerkannt wurden. Durch den Beitritt der fünf ostdeutschen Länder sowie die Wiedervereinigung von Ost- und West-Berlin zur heutigen Bundeshauptstadt zählt die Bundesrepublik Deutschland seit 1990 sechzehn Bundesländer.",
  "num_predictions": "10",
  "num_samples": "2500"
}'
#+end_src

#+RESULTS:
#+begin_src
                         mean_prob   median_prob               prob_interval
name                                                                        
Geschichte                0.999993  1.000000e+00                      [1, 1]
Politik                   0.071303  6.839593e-06   [5.69532e-18, 0.00618306]
Wirtschaftskunde          0.021660  2.690139e-09   [6.1692e-23, 1.13533e-05]
Arbeitslehre              0.010736  5.018213e-10   [1.35649e-22, 1.0695e-06]
Interkulturelle Bildung   0.009460  3.141978e-10  [4.50761e-24, 9.82849e-07]
Berufliche Bildung        0.009675  2.964138e-11  [5.06838e-29, 1.84728e-07]
Geografie                 0.005669  1.680038e-11  [8.61859e-25, 6.83754e-08]
Deutsch                   0.005364  1.242213e-11   [1.6779e-27, 4.53194e-08]
Sozialpädagogik           0.006054  8.978197e-12  [5.57258e-30, 4.06391e-08]
Gesellschaftskunde        0.003010  8.728597e-12  [1.22261e-26, 4.24803e-08]
#+end_src

* Notes / Limitations

** RAM Usage

The service requires roughly 2GB of RAM to operate. This usage should be static with time.

* Installation (through ~Nix Flakes~)

Add this repository to your Flake inputs. This may look like this:
#+begin_src nix
{
  inputs = {
    its-jointprobability = {
      url = "github:openeduhub/its-jointprobability";
      # optional if using as application, required if using as library
      nixpkgs.follows = "nixpkgs"; 
    };
  };
}
#+end_src

The micro-service is provided both as a ~nixpkgs~ overlay and as an output (~packages.${system}.its-jointprobability~). Thus, it may be included through
#+begin_src nix
{
  outputs = { self, nixpkgs, its-jointprobability, ... }:
    let
      system = "x86_64-linux";
      pkgs =
        (nixpkgs.legacyPackages.${system}.extend
          its-jointprobability.overlays.default);
    in
    { ... };
}
  
#+end_src

The Python library is provided as an output (~lib.${system}.its-jointprobability~). Note that this is a function mapping a Python package (e.g. ~pkgs.python310~) to the library. Its inclusion may look like this:
#+begin_src nix
{
  outputs = { self, nixpkgs, its-jointprobability, ... }:
    let
      system = "x86_64-linux";
      pkgs = nixpkgs.legacyPackages.${system};
      
      python-with-packages =
        pkgs.python310.withPackages (py-pkgs: [
          # some example packages
          py-pkgs.numpy
          py-pkgs.pandas
          # the its-jointprobability library
          (its-jointprobability.lib.${system}.its-jointprobability py-pkgs)
        ]);
    in
    { ... };
}
#+end_src
